/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.


https://www.onlinegdb.com/online_c++_compiler //not working for format:
https://coliru.stacked-crooked.com/
https://cpp.sh/

*******************************************************************************/

#include <iostream>
#include <sstream>      // std::stringstream
#include <queue>
#include <vector>
#include <climits>
#include <complex>
#include <string>
#include <tuple>
#include <utility>
#include <set> // lower_bound, insert, erase;  multiset: find, erase

// #include <format>. //std::cout << std::format("Hello {}!\n", "world");
// print logs: be careful it. or it->; how to handle print in each return for dfs;

#include <ranges>
using std::vector;
using std::priority_queue;
using std::endl;
using std::cout;
using std::pair;
using std::stringstream; // stringstream ss; ss << 100 << ' ' << 200; cout << ss.str(); //ss>>a>>b;  dfs(ss&)
using std::set;
using std::multiset;



// TODO: add map, heaps etc.
// multiset


/*

auto hcmp = [](const vector<int>& a, const vector<int> b) {
    return a[1] < b[1];
};
priority_queue<vector<int>, vector<vector<int> >, decltype(hcmp) > pq{hcmp};


   const auto data = {1, 8, 5, 6, 3, 4, 0, 9, 7, 2};
    struct
    {
        bool operator()(const int l, const int r) const { return l > r; }
    } customLess;
    std::priority_queue custom_priority_queue(data.begin(), data.end(), customLess);
    
*/

/*
    for (std::tuple<int&, std::string&, char&> elem : std::views::zip(x, y, z))
*/
int main()
{

    return 0;
};
